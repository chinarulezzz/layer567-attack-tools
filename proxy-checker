#!/usr/bin/perl
use strict;
use warnings;
use diagnostics;
use autodie;
use threads; no warnings 'threads';

use File::Basename;
use List::Util 'shuffle';
use Getopt::Long;
use HTTP::Tiny;

sub proxychk;
sub getmyip;

my $program = basename $0;
my $version = '0.1';
my $help    = <<"EOH";
$program - test reliability of open web proxies
usage: $program [options] STDIN

Options:
  -h, --help                  show this help message and exit
  -v, --version               show version and exit
  -u, --user-agent  STR|FILE  set UA as user-agent
  -t, --threads     NUMBER    set NUMBER of connection threads
  -W, --show-white            show white proxies [default:0]
  -G, --show-gray   0|1       show gray  proxies [default:1]
  -O, --show-other  0|1       show proxies, whose IP addresses are different
                              from the proxy IP when connecting [default:0]
  -B, --show-bad    0|1       show proxies whose response is not 200 [default:0]

Examples:
  wget http://spys.me/proxy.txt -qO- | grep-ipaddr-port > proxies.txt
  $program < proxies.txt | grep-ipaddr-port

See also:
  http://www.google.com/search?q=+\":8080\" +\":3128\" +\":80\" filetype:txt
EOH

my @PROXIES;
my @THREADS;
my @UAS;
my $myIP;

# default options
my %OPTS = (
    ua               =>  'curl/7.37.0',
    threads          =>  10,
    showGray         =>  1,
    showWhite        =>  0,
    showOther        =>  0,
    showBad          =>  0,
);

GetOptions(
    'h|help!'        =>  \$OPTS{help},
    'v|version!'     =>  \$OPTS{version},
    'u|user-agent=s' =>  \$OPTS{ua},
    't|threads=i'    =>  \$OPTS{threads},
    'W|show-white=i' =>  \$OPTS{showWhite},
    'G|show-gray=i'  =>  \$OPTS{showGray},
    'O|show-other=i' =>  \$OPTS{showOther},
    'B|show-bad=i'   =>  \$OPTS{showBad},
);

print "$help\n"    and exit if $OPTS{help};
print "$version\n" and exit if $OPTS{version};

&getmyip;

if (-f $OPTS{ua}) {
    print "Found wordlist at $OPTS{ua}...\n";
    open(my $fh, $OPTS{ua});
    while (<$fh>) {
        chomp;
        push @UAS, $_;
    }
    close $fh;
} else {
    push @UAS, $OPTS{ua};
}

my $counter = 0;
while (<STDIN>) {
    chomp;
    if (++$counter == $OPTS{threads}) {
        # start threads
        $_->join() for @THREADS;

        # wait running threads done
        $_->is_running() && sleep 1 for @THREADS;

        $counter = 0;
        @THREADS = ();
    } else {
        push @THREADS, threads->create('proxychk', $_);
    }
}

print STDERR "Finishing remaining threads...\n";
$_->join() for @THREADS;
$_->is_running() && sleep(1) for @THREADS;

sub proxychk {
    my $proxy       = shift;
    my $proxyIP     = (split /:/, $proxy)[0];
    my $ua          = shuffle @UAS;

    my $http = HTTP::Tiny->new(agent    => $ua,
                               proxy    => "http://$proxy/",
                               timeout  => 6);

    my $r = $http->get('https://ipecho.net/plain');

    if ($r->{status} != 200) {
        print "$proxy $r->{status} -> bad\n" if $OPTS{showBad};
        return;
    }

    if ($r->{content} eq $myIP) {
        print "$proxy $r->{status} -> myip\n"          if $OPTS{showWhite};
    } elsif ($r->{content} eq $proxyIP) {
        print "$proxy $r->{status} -> grey\n"          if $OPTS{showGray};
    } else {
        print "$proxy $r->{status} -> $r->{content}\n" if $OPTS{showOther};
    }
}

sub getmyip {
    my $r = HTTP::Tiny->new->get('http://ipecho.net/plain');
    die "Fail to get wan ip address.\n" unless $r->{status} == 200;
    $myIP = $r->{content};
}

# vim:sw=4:ts=4:sts=4:et:cc=80
# End of file
